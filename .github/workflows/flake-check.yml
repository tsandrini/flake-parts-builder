# --- Run `nix flake check`
name: nix flake check

on:
  workflow_dispatch: # allows manual triggering from the Actions UI
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]
  repository_dispatch:
    types: [create-pull-request]

env:
  BUILD_OPTS: >-
    --no-nom
    --no-link
    --skip-cached
    --option accept-flake-config true

jobs:
  flake-check:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checking out repository..."
        uses: actions/checkout@v4

      - name: "Installing and configuring the nix package manager..."
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            accept-flake-config = true

      - name: "Settings up cachix binary cache..."
        uses: cachix/cachix-action@v16
        with:
          name: tsandrini
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: "Setting up packages..."
        run: |
          nix profile install nixpkgs#nix-fast-build # parallel nix builder
          nix profile install nixpkgs#cargo-audit # Audit Cargo.lock files for crates with security vulnerabilities

      - name: "Building `.#checks` attribute..."
        run: nix-fast-build ${BUILD_OPTS} --flake '.#checks'

      - name: "Building `.#packages` attribute..."
        run: nix-fast-build ${BUILD_OPTS} --flake '.#packages'

      - name: "Building `.#devShells` attribute..."
        run: nix-fast-build ${BUILD_OPTS} --flake '.#devShells'

      - name: "Running cargo-audit"
        run: cargo-audit audit

      - name: "Checking flake inputs for stale & insecure nixpkgs versions..."
        uses: DeterminateSystems/flake-checker-action@main
