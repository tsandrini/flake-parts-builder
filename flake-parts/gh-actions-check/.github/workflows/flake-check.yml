# --- Run `nix flake check`
name: nix flake check

on:
  workflow_dispatch: # allows manual triggering from the Actions UI
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]
  repository_dispatch:
    types: [create-pull-request]

env:
  BUILD_OPTS: >-
    --no-nom
    --no-link
    --skip-cached
    --option accept-flake-config true
# TODO: Additional specs for the parallelization, for more info see
# https://github.com/Mic92/nix-fast-build
#    --eval-workers 4
#    --max-jobs 4
#    --eval-max-memory-size 1024
#    --systems x86_64-linux aarch64-linux


jobs:
  flake-check:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checking out repository..."
        uses: actions/checkout@v4

      - name: "Installing and configuring the nix package manager..."
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            accept-flake-config = true

      # NOTE: Alternatively you can use the DeterminateSystems nix installer
      # - name: "Installing and configuring the nix package manager..."
      #   uses: DeterminateSystems/nix-installer-action@main
      #   with:
      #     extra-conf: |
      #       accept-flake-config = true

      # NOTE: Optional cachix action, this will automatically upload
      #       all of the upcoming build artifacts
      # - name: "Settings up cachix binary cache..."
      #   uses: cachix/cachix-action@v16
      #   with:
      #     name: organization
      #     authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      # NOTE: You can enter direnv environment and install packages
      #       via your default shell
      # - name: "Entering developer environment..."
      #   uses: HatsuneMiku3939/direnv-action@v1

      # NOTE: Or you can install necessary packages directly like this
      - name: "Setting up packages..."
        run: |
          nix profile install nixpkgs#nix-fast-build # parallel nix builder

      - name: "Building `.#checks` attribute..."
        run: nix-fast-build ${BUILD_OPTS} --flake '.#checks'

      - name: "Building `.#packages` attribute..."
        run: nix-fast-build ${BUILD_OPTS} --flake '.#packages'

      - name: "Building `.#devShells` attribute..."
        run: nix-fast-build ${BUILD_OPTS} --flake '.#devShells'

      - name: "Checking flake inputs for stale & insecure nixpkgs versions..."
        uses: DeterminateSystems/flake-checker-action@main
